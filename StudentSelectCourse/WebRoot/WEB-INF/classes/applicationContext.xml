<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
	    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd">
	<!-- 配置自动扫描的包 -->
	<context:component-scan base-package="*"></context:component-scan>
	<!-- 配置数据源 -->
	<context:property-placeholder location="classpath:db.properties"/>
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
	</bean>
	<!-- 配置hibernate的SessionFactory -->
<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		
		<!-- 配置映射文件 -->
		<property name="mappingLocations"  value="classpath:model/*.hbm.xml"></property>
	</bean>
<!--
	 配置 Spring 的声明式事务 (Spring对hibernate的事务管理)
	 1. 配置事务管理器（spring在service中事务管理，是当他调用service中的一个方法的时候 就会开启一个事务，
	 直到你执行完这个方法，才会commit。所以只要其中有一个失败都会回滚） 
	-->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 2. 配置事务的传播特性, 需要事务管理器 -->
	<!-- tx:是transaction的缩写,即是跟事务相关的配置.
	advice:通知,切面必须要完成的工作
	id:该advice bean的标识.
	transaction-manager:指定事务通知的管理者
	 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
	<!-- attributes:通过<tx:attributes />标签定制<tx:advice />标签所创建的通知的行为.
	<tx:attributes />标签只接受<tx:method />标签作为其子元素 -->
		<tx:attributes>
		<!-- 
		<tx:method>是进行事务设置的,method 属性指定切面类中通知方法的名称.
		name:方法名的匹配模式，通知根据该模式寻找匹配的方法，该属性可以使用通配符
		propagation：设定事务定义所用的传播级别，如果没有，则取REQUIRED（在有transaction状态下执行；
		如当前没有transaction，则创建新的transaction；）
        -->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut expression="execution(public * service.*.*.*(..))" id="services"/><!-- 把事务控制在Service层-->
	<!--指定在service切入点应用txAdvice增强处理-->
	<!-- advice-ref 指事务管理器   pointcut-ref指切点，也就是哪些方法要事务支持 -->
	<aop:advisor advice-ref="txAdvice" pointcut-ref="services"/>
	</aop:config>
</beans>
